HW
Client_Server
1) Прочиать про клиент-серверную архитектуру
2) Что ткое HTTP и HTTPS
3) HTTP методы
4) HTTP статус коды сервера
5) Что такое ядро браузера 
6) Какие браузеры какиие ядра используют
7) Что такое API
8. Что такое ендпоинты
9) URL (URI, URL, URN)
10) Идемпотентные HTTP методы
11) Безопасные HTTP методы
12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов


Прочиать про клиент-серверную архитектуру

Клиент - серверная архитектура?
●    Сервер – логический процесс, который обеспечивает некоторый сервис по запросу от клиента. Обычно 
сервер не только выполняет запрос, но и управляет очередностью запросов, буферами обмена, 
извещает своих клиентов о выполнении запроса и т. д.  
●    Клиент – процесс, который запрашивает обслуживание от сервера. Процесс не является клиентом по 
каким-то параметрам своей структуры, он является клиентом только по отношению к серверу. 
●    Сеть, протоколы – третий компонент, который обеспечивает обмен информацией между клиентом и 
сервером.
При взаимодействии клиента и сервера инициатором диалога с сервером, как правило, является клиент, 
сервер сам не инициирует совместную работу. 
Технология клиент-сервер - шаблон проектирования, основа для создания веб-приложений, взаимодействие, 
при котором одна программа (клиент) запрашивает услугу (выполнение какой либо совокупности действий), а 
другая программа (сервер) ее выполняет.
Двухзвенная архитектура клиент-сервер:
●    «Толстый клиент»: на сервере реализованы главным образом функции доступа к базам данных, а 
основные прикладные вычисления выполняются на стороне клиента. 
●    «Тонкий клиент»: на сервере выполняется основная часть прикладной обработки данных, а на 
клиентские рабочие станции передаются уже результаты обработки данных для просмотра и анализа 
пользователем с возможностью их последующей обработки (в минимальном объеме).
Многоуровневая архитектура «клиент-сервер»:
Разновидность архитектуры клиент-сервер, в которой функция обработки данных вынесена на один или 
несколько отдельных серверов. Это позволяет разделить функции хранения, обработки и представления 
данных для более эффективного использования возможностей серверов и клиентов.







Что ткое HTTP и HTTPS
HTTP — широко распространенный протокол передачи данных, изначально предназначенный для передачи 
гипертекстовых документов (то есть документов, которые могут содержать ссылки, позволяющие 
организовать переход к другим документам), сейчас же для любых данных.
Протокол HTTP предполагает использование клиент-серверной структуры передачи данных. Клиентское 
приложение формирует запрос и отправляет его на сервер, после чего серверное ПО обрабатывает данный 
запрос, формирует ответ и передает его обратно клиенту.
То есть этот протокол не только устанавливает правила обмена информацией, но и служит транспортом для 
передачи данных — с его помощью браузер загружает содержимое сайта на ваш компьютер или смартфон.
У HTTP есть один недостаток: данные передаются в открытом виде и никак не защищены. На пути из точки А в 
точку Б информация в интернете проходит через десятки промежуточных узлов, и, если хоть один из них 
находится под контролем злоумышленника, данные могут перехватить. То же самое может произойти, когда 
вы пользуетесь незащищенной сетью Wi-Fi, например, в кафе. Для установки безопасного соединения 
используется протокол HTTPS с поддержкой шифрования.
Защиту данных в HTTPS обеспечивает криптографический протокол SSL/TLS, который шифрует передаваемую 
информацию. По сути этот протокол является оберткой для HTTP. Он обеспечивает шифрование данных и 
делает их недоступными для просмотра посторонними. Протокол SSL/TLS хорош тем, что позволяет двум 
незнакомым между собой участникам сети установить защищенное соединение через незащищенный канал. 
При установке безопасного соединения по HTTPS ваш компьютер и сервер сначала выбирают общий 
секретный ключ, а затем обмениваются информацией, шифруя ее с помощью этого ключа. Общий секретный 
ключ генерируется заново для каждого сеанса связи. Его нельзя перехватить и практически невозможно 
подобрать — обычно это число длиной более 100 знаков. Этот одноразовый секретный ключ и используется 
для шифрования всего общения браузера и сервера. Казалось бы, идеальная система, гарантирующая 
абсолютную безопасность соединения. Однако для полной надежности ей кое-чего не хватает: гарантии того, 
что ваш собеседник именно тот, за кого себя выдает. Для этой гарантии существует сертификат.
Вам как пользователю сертификат не нужен, но любой сервер (сайт), который хочет установить безопасное 
соединение с вами, должен его иметь. Сертификат подтверждает две вещи: 1) Лицо, которому он выдан, 
действительно существует и 2) Оно управляет сервером, который указан в сертификате. Выдачей
сертификатов занимаются центры сертификации — что-то вроде паспортных столов. Как и в паспорте, в 
сертификате содержатся данные о его владельце, в том числе имя (или название организации), а также 
подпись, удостоверяющая подлинность сертификата. Проверка подлинности сертификата — первое, что 
делает браузер при установке безопасного HTTPS-соединения. Обмен данными начинается только в том 
случае, если проверка прошла успешно.
HTTP/2 стал первым бинарным протоколом. Если сравнивать его с прошлой версией протокола, то здесь 
разработчики поменяли методы распределения данных на фрагменты и их отправку от сервера к 
пользователю и наоборот. Новая версия протокола позволяет серверам доставлять информацию, которую 
клиент пока что не запросил. Это было внедрено с той целью, чтобы сервер сразу же отправлял браузеру для 
отображения документов дополнительные файлы и избавлял его от необходимости анализировать страницу 
и самостоятельно запрашивать недостающие файлы.
Еще одно отличие http 2.0 от версии 1.1 – мультиплексирование запросов и ответов для решения проблемы 
блокировки начала строки, присущей HTTP 1.1. Еще в новом протоколе можно сжимать HTTP заголовки и 
вводить приоритеты для запросов.
Компоненты HTTP
HTTP определяет следующую структуру запроса (request):
●    стартовая строка (starting line) — определяет тип сообщения, имеет вид Метод URI HTTP/Версия 
протокола, например GET /web-programming/index.html HTTP/1.1
●    заголовки запроса (header fields) — характеризуют тело сообщения, параметры передачи и прочие 
сведения
●    тело сообщения (body) — необязательное
HTTP определяет следующую структуру ответного сообщения (response):
●    строка состояния (status line), включающая код состояния и сообщение о причине 
●    поля заголовка ответа (header fields)
●    дополнительное тело сообщения (body)

HTTP методы

Методы HTTP-запроса
Метод, используемый в HTTP-запросе, указывает, какое действие вы хотите выполнить с этим запросом. 
Раньше хватало только GET, т.к. считалось, что вы можете хотеть от сервера только получить ответ. Но сейчас 
вам может понадобиться отредактировать профиль, удалить пост в соц. сети и т.п. Тогда для удобства были 
созданы различные методы. Вот основные:
●    GET: получить подробную информацию о ресурсе 
●    POST: создать новый ресурс
●    PUT: обновить существующий ресурс 
●    DELETE: Удалить ресурс
Абсолютно любой веб-сервер должен работать, по крайней мере с двумя методами GET и HEAD. Если сервер 
не смог определить метод, указанный в заголовке запроса клиента, он должен вернуть код статуса 501, если-
же метод серверу известен, но неприменим к данному ресурсу, будет возвращен код статуса 405. Как в 
первом, так и во втором случае, сервер должен включить в свой ответ, заголовок Allow со списком методов, 
которые он поддерживает.
Метод OPTIONS
Данный метод используется для выяснения поддерживаемых веб-сервером возможностей или параметров 
соединения с конкретным ресурсом. Сервер включает в ответный запрос заголовок Allow, со списком 
поддерживаемых методов и возможно информацию о поддерживаемых расширениях. Тело запроса клиента, 
содержит информацию об интересующих его данных, но на данном этапе формат тела и порядок работы с 
ним, не определен, пока, сервер должен его игнорировать. С ответным запросом сервера, происходит 
аналогичная ситуация.
Что-бы выяснить возможности сервера, клиент должен указать в запросе URI, символ - "*", то есть данный 
запроса не кэшируются.
запрос к серверу выглядит как: OPTIONS * HTTP/1.1. Кроме прочего, данный запрос может быть использован 
для проверки работоспособности сервера и поддержки им протокола HTTP, версии 1.1. Результаты данного 
Метод GET
Метод GET, применяется для запроса конкретного ресурса. Так-же с помощью GET, может быть инициирован 
некий процесс, при этом, в тело ответа, включается информация о ходе выполнения инициированного 
запросом действия.
Параметры для выполнения запроса, передаются в URI запрашиваемого ресурса, после символа "?". Запрос в 
таком случае выглядит примерно так: GET /some/resource?param1=val1&param2=val2 HTTP/1.1.
Как установлено в стандарте HTTP, запросы методом GET, являются идемпотентными, то есть, повторная 
отправка одного и того-же запроса, методом GET, должна приводить к одному и тому-же результату, в случае, 
если сам ресурс, в промежутках между запросами, изменен не был, что позволяет кэшировать результаты, 
выдаваемые на запрос методом GET.
Кроме вышесказанного, существуют еще два вида метода GET, это:
условный GET, содержащий заголовки If-Modified-Since, If-Match, If-Range и им подобные,
Частичный GET, содержащий заголовок Range с указанием байтового диапазона данных, которые сервер 
должен отдать. Данный вид запроса используется для докачки и организации многопоточных закачек.
Порядок работы с этими подвидами запроса GET, стандартами определен отдельно.
Метод HEAD
Данный метод, аналогичен методу GET, с той лишь разницей, что сервер не отправляет тело ответа. Метод 
HEAD, как правило используется для получения метаданных ресурса, проверки URL ( есть-ли указанный ресурс 
на самом деле ) и для выяснения факта изменения ресурса с момента последнего обращения к нему.
Заголовки ответа могут быть закэшированы, при несоответствии метаданных и информации в кэше, копия 
ресурса помечается как устаревшая.
Метод POST
Метод POST, используется для передачи пользовательских данных на сервер, указанному ресурсу. Примером 
может послужить HTML форма с указанным атрибутом Method="POST", для отправки комментария к статье. 
После заполнения необходимых полей формы, пользователь жмет кнопку "Отправить" и данные, методом 
POST, передаются серверному сценарию, который в свою очередь выводит их на странице комментариев. 
Таким-же образом, с помощью метода POST, можно передавать файлы.
В отличии от GET, метод POST, не является идемпотентным, то есть неоднократное повторение запроса POST, 
может выдавать разные результаты. В нашем случае, будет появляться новая копия комментария при каждом 
запросе.
Если в результате запроса методом POST, возвращается код 200 (Ok) или 204 (No Content), в тело ответа 
сервера, добавляется сообщение о результате выполнения запроса. Например, если был создан ресурс, 
сервер вернет 201 (Created), указав при этом URI созданного ресурса в заголовке Location. 
Ответы сервера, на выполнение метода POST, не кэшируются.
Метод PUT
Используется для загрузки данных запроса на указанный URI. В случае отсутствия ресурса по указанному в 
заголовке URI, сервер создает его и возвращает код статуса 201 (Created), если ресурс присутствовал и был 
изменен в результате запроса PUT, выдается код статуса 200 (Ok) или 204 (No Content). Если какой-то из 
переданных серверу заголовков Content-*, не опознан или не может быть использован в данной ситуации, 
сервер возвращает статус ошибки 501 (Not Implemented).
Главное различие методов PUT и POST в том, что при методе POST, предполагается, что по указанному URI, 
будет производиться обработка, передаваемых клиентом данных, а при методе PUT, клиент подразумевает, 
что загружаемые данные уже соответствуют ресурсу, расположенному по данному URI.
Ответы сервера при методе PUT не кэшируются. 
Метод PATCH
Работает аналогично методу PUT, но применяется только к определенному фрагменту ресурса.

Метод DELETE
Удаляет ресурс, расположенный по заданному URI.
Вообще по спецификации HTTP из всех методов сервер должен уметь понимать только GET, а остальные на 
усмотрение. Но при этом и не задано строго, что сервер должен делать при получении запроса. То есть 
гипотетически вы с помощью одного метода можете делать вообще любую операцию. Однако в этом нет 
никакого практического смысла. В дальнейшем было введено соглашение REST, определившее структуру 
построения веб-приложений, в том числе и работу с методами.
Источник: Методы HTTP 
Доп. материал:
●    Parameter Binding
●    HTTP POST with URL query parameters — good idea or not? 
●    Идемпотентный метод
Различия методов GET и POST
Get: 
Post:
запрос инфо от сервера
ограничение кол-ва символов: длина url 2048
передача неважных неконфиденц.данных (напр.язык,фильтры) 
нет body
данные передаются в url
Get можно использовать как Post, например передавать параметры в строке 
(?параметр1&параметр2&параметр3..)
Но принято использовать конкретные методы запроса под конкретные задачи
добавление инфо на сервере
ограничение кол-ва символов (разработчик ставит ограничение, так как можно все поломать, в некоторых 
случаях), ограничено только срывом соединения клиент-сервер
можно передавать конфиденец.данные 
есть body
данные передаются в body
Основное состоит в способе передачи данных веб-формы обрабатывающему скрипту, а именно:
●    Метод GET отправляет скрипту всю собранную информацию формы как часть URL: 
http://www.komtet.ru/script.php?login=admin&name=komtet
●    Метод POST передает данные таким образом, что пользователь сайта уже не видит передаваемые 
скрипту данные: http://www.komtet.ru/script.php
Оба метода успешно передают необходимую информацию из веб-формы скрипту, поэтому при выборе того 
или иного метода, который будет наиболее подходить сайту, нужно учитывать следующие факторы:
●    Принцип работы метода GET ограничивает объем передаваемой скрипту информации;
●    Так как метод GET отправляет скрипту всю собранную информацию формы как часть URL (то есть в 
открытом виде), то это может пагубно повлиять на безопасность сайта;
●    Страницу, сгенерированную методом GET, можно пометить закладкой (адрес страницы будет всегда 
уникальный), а страницу, сгенерированную метод POST нельзя (адрес страницы остается неизменным, 
так как данные в URL не подставляются);
●    Используя метод GET можно передавать данные не через веб-форму, а через URL страницы, введя 
необходимые значения через знак &: http://www.komtet.ru/script.php?login=admin&name=komtet
●    Метод POST в отличие от метода GET позволяет передавать запросу файлы;
●    При использовании метода GET существует риск того, что поисковый робот может выполнить тот или 
иной открытый запрос.


HTTP статус коды сервера
Коды ответов/состояния сервера (HTTP status codes)
Несколько из них могут спросить чуть конкретнее, чем просто название, обычно на Ваш же выбор.
Иногда на собеседовании можно услышать вопрос: «Что дают эти коды ответа и что с ними можно делать?». 
На него настолько обширный ответ, что в рамках данной статьи это было бы не уместно, но конкретно для 
тестировщика чаще всего это просто удобное понимание, как именно отреагировал сервер на web или API 
запрос.
●    Информационные (100-105) 
●    Успешные (200-226)
●    Перенаправление (300-307) 
●    Ошибка клиента (400-499) 
●    Ошибка сервера (500-510)
Почему ошибка 404 относится к 4** - клиентской, если по идее должна быть 5**?
Хотя интуитивно можно подумать, что данная ошибка должна относиться к ошибкам со стороны сервера, 404 
по задумке является клиентской ошибкой, то есть подразумевается, что клиент (Вы) должен был знать, что 
URL страницы был перемещен или удален и Вы пытаетесь открыть несуществующую страницу.
На какой метод не может вернуться ошибка 501?
The HTTP 501 Not Implemented серверный код ответа на ошибку указывает, что метод запроса не 
поддерживается сервером и не может быть обработан. Единственными методами, которые необходимы 
серверам для поддержки (и, следовательно, не должны возвращать этот код), являются GET и HEAD.
TCP/IP
TCP/IP — сетевая модель передачи данных, представленных в цифровом виде. Модель описывает способ 
передачи данных от источника информации к получателю. В модели предполагается прохождение 
информации через четыре уровня, каждый из которых описывается правилом (протоколом передачи). 
Наборы правил, решающих задачу по передаче данных, составляют стек протоколов передачи данных, на 
которых базируется Интернет. 
Набор интернет-протоколов — это концептуальная модель и набор коммуникационных протоколов, 
используемых в Интернете и подобных компьютерных сетях. Он широко известен как TCP/IP, поскольку 
базовые протоколы в пакете — это протокол управления передачей (TCP) и интернет-протокол (IP). 
Набор интернет-протоколов обеспечивает сквозную передачу данных, определяющую, как данные должны 
пакетироваться, обрабатываться, передаваться, маршрутизироваться и приниматься. Эта функциональность 
организована в четыре слоя абстракции, которые классифицируют все связанные протоколы в соответствии с 
объемом задействованных сетей. 
От самого низкого до самого высокого уровня:
●    Канальный уровень (Network Access Layer) или уровень связи, содержащий методы связи для данных,
которые остаются в пределах одного сегмента сети; 
●    Межсетевой уровень или интернет-уровень (Internet Layer), обеспечивающий межсетевое 
взаимодействие между независимыми сетями; 
●    Транспортный уровень (Transport Layer), обрабатывающий связь между хостами;
●    Прикладной уровень (Application Layer), который обеспечивает обмен данными между процессами 
для приложений.




Браузер = оболочка + ядро
Среди них относительно больше типов оболочек и меньше ядер. Оболочка относится к оболочке браузера: например, меню, панели инструментов и т. Д. Он в основном предназначен для работы с пользовательским интерфейсом, настройки параметров и так далее. Он вызывает ядро ​​для реализации различных функций. Ядро - это ядро ​​браузера. Ядро - это программа или модуль, который отображает контент на основе языка разметки.

Что такое ядро ​​браузера
Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или движок рендеринга) и движок JS. Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения и т. Д.), Организацию информации (например, добавление CSS и т. Д.) И расчет режима отображения веб-страницы, а затем вывод ее на монитор или принтер. Разница в ядре браузера будет по-разному интерпретировать синтаксис веб-страницы, поэтому эффект рендеринга будет другим. Все веб-браузеры, почтовые клиенты и другие приложения, которым необходимо редактировать и отображать сетевой контент, требуют ядра. (См. Википедия). Движок JS анализирует язык Javascript и выполняет язык Javascript для достижения динамических эффектов веб-страницы. Сначала не было четкого различия между движком рендеринга и движком JS, а позже движок JS становился все более независимым, и ядро ​​имело тенденцию ссылаться только на движок рендеринга. Механизм рендеринга определяет, как браузер отображает содержимое веб-страницы и информацию о формате страницы. Разные ядра браузеров по-разному интерпретируют синтаксис записи веб-страниц, поэтому эффект рендеринга (отображения) одной и той же веб-страницы в браузерах разных ядер также может быть различным. Именно поэтому авторам веб-страниц необходимо тестировать веб-страницы в браузерах разных ядер. Покажите причину эффекта. Движок JS отвечает за интерпретацию, компиляцию и выполнение JavaScript, чтобы заставить веб-страницу достигать некоторых динамических эффектов. Но обычные ядра браузера можно разделить на эти пять типов: Trident, Gecko, Presto, Webkit, Blink.


Классификация ядра
Trident

Trident (ядро IE): Эта программа ядра была впервые принята в IE4 в 1997 году. Она была изменена Microsoft на основе кода Mosaic и продолжала использовать IE11. Она также обычно называется «ядром IE». Trident на самом деле является открытым ядром, и его интерфейсное ядро ​​достаточно развито, поэтому есть много браузеров (оболочек), которые используют IE вместо ядра IE к
Из-за «монополии» самого IE (хотя IE не является монополией по названию, но на самом деле, особенно с Windows 95 до первых дней XP, IE действительно использовал Dongfeng Windows находится в «монопольном» положении и долгое время доминировало над ядром Trident. Microsoft долгое время не обновляла ядро ​​Trident. Это привело к двум последствиям, одно из которых состоит в том, что ядро ​​Trident почти не касалось стандарта W3C ( 2005 г.) Во-вторых, большое количество ошибок и других проблем безопасности в ядре Trident не было решено вовремя, и затем некоторые разработчики и некоторые ученые, которые привержены открытому исходному коду, открывают свое мнение, что Internet Explorer небезопасен, и многие пользователи обратились к нему. В это время появились другие браузеры, Firefox и Opera. Значительное увеличение доли рынка браузеров с ядром без Trident также заставило многих веб-разработчиков обратить внимание на веб-стандарты и эффекты просмотра браузеров без IE. к
Дополнение: начиная с версии 11 IE изначально поддерживает технологию WebGL. Механизм JavaScript IE8 - Jscript, и IE9 начал использовать Chakra. Две версии очень разные. Chakra превосходна с точки зрения скорости и стандартизации. к
Общие браузеры с ядром Trident: [1] IE6, IE7, IE8 (Trident 4.0), IE9 (Trident 5.0), IE10 (Trident 6.0); [1] 360 браузер безопасности (1.0-5.0 - Trident, 6.0 - Trident + Webkit, 7.0 - Trident + Blink)Гепард Ультра Лайт Браузер360-скоростной браузер (Trident + Webkit до 7.5, Trident + Blink для 7.5)Cheetah Safe Browser(Версия 1.0-4.2 - Trident + Webkit, 4.3 и более поздние версии - Trident + Blink) Сверхлегкий браузер Cheetah, браузер Maxthon (Maxthon 1.x и 2.x - ядро ​​IE, 3.x - двухъядерный IE и Webkit) , Браузер Baidu (ранняя версия), браузер Window of the World [2] (изначально ядро ​​IE, ядро ​​Chrome + IE, выпущенное в 2013 году), браузер 2345, Tencent TT, браузер Taobao, браузер сбора и чтения, Sogou Express Браузер (Trident для 1.x, Trident + Webkit для 2.0 и более поздних версий), браузер Ayun (ранняя версия),Rising Security Browser, Тонкий браузер, GreenBrowser, браузер Aifan (версия до 12), браузер 115, браузер 155, флэш-браузер, браузер оксида углерода, браузер конфет, браузер Rainbow, браузер Ruiying, Храбрый без границ Браузер, браузер 114, браузер Ant, браузер Feiteng, браузер Suda, браузер Zorro, браузер Dolphin (iPhone / iPad / Android), браузер UC (ядро Blink + ядро ​​Trident) и т. Д. к
Новая версия некоторых браузеров является «двухъядерной» или даже «многоядерной», один из которых - Trident, а затем добавляется еще один. Отечественные производители обычно называют другие ядра «высокоскоростным режимом просмотра», тогда как Trident является «совместимым режимом просмотра», и пользователи могут переключаться между ними.

Gecko

Gecko (ядро Firefox): Netscape 6 начал внедрять ядро, а позже Mozilla FireFox (браузер Firefox) также принял это ядро. Отличительной чертой Gecko является то, что код полностью открыт, поэтому его можно разрабатывать в высокой степени. Программисты по всему миру Вы можете написать код для него и добавить функциональность. Поскольку это ядро ​​с открытым исходным кодом, многие его одобряют, и для ядра Gecko существует множество браузеров, что является важной причиной того, что ядро ​​Gecko является молодым, но его доля на рынке может быстро возрасти. к
На самом деле происхождение движка Gecko не связано с IE. Ранее я говорил, что IE не использует стандарты W3C, что вызвало недовольство у некоторых разработчиков в Microsoft; они прекратили обновление Некоторые сотрудники Netscape вместе основали Mozilla, переписали ядро ​​на основе ядра Mosaic и разработали Gecko. Но на самом деле браузер ядра Gecko по-прежнему Firefox (Firefox) с большинством пользователей, поэтому его иногда называют ядром Firefox. Кроме того, Gecko также является кроссплатформенным ядром, которое можно использовать в Windows, BSD, Linux и Mac OS X. к
Дополнение: движком JavaScript является SpiderMonkey. к
Общие браузеры с ядром Gecko: [1] Mozilla Firefox, Mozilla SeaMonkey, waterfox (64-разрядная версия Firefox с открытым исходным кодом), Iceweasel, Epiphany (ранняя версия), Flock (ранняя версия), K-Meleon

Presto

Presto (pre-Opera kernel) (устарело): ядро, используемое в Opera 12.17 и более ранних версиях, прекратило разработку и теперь устарело. Ядро впервые использовалось в Opera7 в 2003 году. Особенностью этого движка является скорость рендеринга. Оптимизация достигла предела, но цена за счет веб-совместимости. к
На самом деле это динамическое ядро. Самым большим отличием от предыдущих ядер является обработка скриптов. У Presto есть естественное преимущество. Вся или часть страницы может реагировать на события скрипта. Время от времени пересматривается. Кроме того, ядро ​​имеет самую высокую скорость при выполнении Javascrīpt. Согласно тестам в тех же условиях, время, необходимое для того, чтобы ядро ​​Presto выполнило тот же Javascrīpt, составляет всего около 1/3 от ядер Trident и Gecko (ядро Trident - самое медленное, но два Между ними нет большой разницы.) Один из модификаторов этой статьи считает, что приведенная выше информация о тестировании слишком старая и неполная, потому что небольшой тест, который он провел, показывает, что часть Presto является быстрой, а часть - медленной, а ядра в целом эквивалентны. В этом тесте, поскольку аппаратные условия компьютера Apple отличались от обычных компьютеров, ядро ​​WebCore не тестировалось. Жаль, что Presto - это коммерческий движок. Помимо Opera единственными, которые используют Presto, являются NDSBrowser, Wii Internet Channle, веб-браузер Nokia 770 и т. Д. Это в значительной степени ограничивает разработку Presto. к
Opera перешла на ядро ​​Google Chrome Blink.

Webkit

Webkit (ядро Safari, прототип ядра Chrome, открытый исходный код): это собственное ядро ​​Apple и ядро, используемое браузером Safari от Apple. Движок Webkit включает в себя механизм верстки WebCore и механизм синтаксического анализа JavaScriptCore, оба производные от KDE KHTML и KJS, все они являются свободным программным обеспечением, лицензированным по соглашению GPL, и поддерживают разработку систем BSD. Так что Webkit - это также бесплатное программное обеспечение и открытый исходный код. С точки зрения безопасности, он не ограничен IE и Firefox, поэтому браузер Safari все еще очень безопасен в Китае. к
ограничивается тем, что Mac OS X не используется широко, а браузер Safari когда-то был эксклюзивным браузером Mac OS X. Можно сказать, что само это ядро ​​имеет небольшую рыночную область применения, но, похоже, оно основано на новейшем браузере Опрос показывает, что рынок браузеров даже превзошел Presto. Конечно, это связано с растущей популярностью Apple после перехода на архитектуру x86, а также с тем, что Safari 3 наконец-то запустил версию для Windows. Есть также популярные браузеры, такие как OmniWeb и Shiira под Mac. к
В быстродействующем режиме высокоскоростного браузера Sogou также используется Webkit в качестве ядра (с точки зрения понимания сценариев Chrome использует собственный разработанный движок V8). Ядро WebKit также широко используется в мобильных телефонах, например, мобильный телефон Google Gphone, iPhone Apple, браузер Nokia Series 60 и другие ядра ядра браузера - все основано на WebKit. к
Основные браузеры WebKit: браузер Maxthon 3, [1] Apple Safari (Win / Mac / iPhone / iPad), мобильный браузер Symbian, браузер Android по умолчанию,

Blink

Внедрение продукции
Blink - это механизм верстки браузера, разработанный Google и Opera Software. Google планирует использовать этот механизм рендеринга в рамках проекта Chromium, и анонсировал эту новость в апреле 2013 года. , Этот движок рендеринга является ветвью компонента WebCore движка с открытым исходным кодом WebKit и используется в браузерах Chrome (28 и более поздние версии), Opera (15 и более поздние версии) и Яндекса.

подводить итоги

IE (до 9) = Trident + Jscript
IE (после 9) = трезубец + чакра
360=Trident+Blink 
Sogou = Trident + WebKit
Firefox=Gecko+JagerMonkey 
Safari=webkit=webcore+jscore 
Chrome=Blink+v8 
Opera=Blink+v8

 Что такое API
API (Application Programming Interface — программный интерфейс приложения, или интерфейс программирования приложений) — специальный протокол для взаимодействия компьютерных программ, который позволяет использовать функции одного приложения внутри другого.



. Что такое ендпоинты
Endpoint, ресурс, URI, URL, URN
Смысл в том, что сайт, написанный на любом языке, поддерживающем HTTP запросы, не посылает на сервер 
никаких PHP/C/Python команд, а общается ним с помощью запросов, описанных в API.
Адрес, на который посылаются сообщения называется Endpoint. Обычно это URL (например, название сайта) и 
порт. Если я хочу создать веб сервис на порту 8080, Endpoint будет выглядеть так: 
http://vladislaveremeev.ru:8080
Если моему Web сервису нужно будет отвечать на различные сообщения я создам сразу несколько URL 
(interfaces) по которым к сервису можно будет обратиться. Например:
●    https://vladislaveremeev.ru:8080 /resource1/status
●    https://vladislaveremeev.ru:8080 /resource1/getserviceInfo 
●    https://vladislaveremeev.ru:8080 /resource1/putID
●    http://vladislaveremeev.ru:8080 /resource1/eventslist 
●    https://vladislaveremeev.ru:8080 /resource2/putID
Как видите у моих эндпойнтов (Endpoints) различные окончания. Такое окончание в Endpoint 
называются Resource, а начало Base URL.
Такое определение Endpoint и Resource используется, например, в SOAP UI для RESTful интерфейсов 
https://vladislaveremeev.ru:8080 - это Base URL
/resource1/status - это Resource 
Endpoint = Base URL + Resource
Понятие Endpoint может использоваться в более широком смысле. Можно сказать, что какой-то 
определенный роутер или компьютер является Endpoint. Обычно это понятно из контекста.
Также следует обратить внимание на то, что понятие Endpoint выходит за рамки RESTful и может использовать 
как в SOAP так и в других протоколах.
Термин Resource также связан с RESTful, но в более широком смысле может означать что-то другое
Итак, простейший запрос состоит из метода и Endpoint 
Request = Method + Endpoint
Ресурс — это ключевая абстракция, на которой концентрируется протокол HTTP. Ресурс — это все, что вы 
хотите показать внешнему миру через ваше приложение. Например, если мы пишем приложение для 
управления задачами, экземпляры ресурсов будут следующие:
●    Конкретный пользователь 
●    Конкретная задача
●    Список задач
Когда вы разрабатываете RESTful сервисы, вы должны сосредоточить свое внимание на ресурсах приложения. 
Способ, которым мы идентифицируем ресурс для предоставления, состоит в том, чтобы назначить ему URI — 
универсальный идентификатор ресурса. Например:
●    Создать пользователя: POST /users
●    Удалить пользователя: DELETE /users/1 
●    Получить всех пользователей: GET /users 
●    Получить одного пользователя: GET /users/1
Расшифруем аббревиатуры:
●   URI – Uniform Resource Identifier (унифицированный идентификатор ресурса) - имя и адрес ресурса в 
сети, включает в себя URL и URN
●   URL – Uniform Resource Locator (унифицированный определитель местонахождения ресурса) - адрес 
ресурса в сети, определяет местонахождение и способ обращения к нему
●   URN – Uniform Resource Name (унифицированное имя ресурса) - имя ресурса в сети, определяет 
только название ресурса, но не говорит как к нему подключиться 
Рассмотрим примеры:
●   URI – https://wiki.merionet.ru/images/vse-chto-vam-nuzhno-znat-pro-devops/1.png 
●   URL - https://wiki.merionet.ru
●   URN - images/vse-chto-vam-nuzhno-znat-pro-devops/1.png 
URI содержит в себе следующие части:
●   Схема (scheme) - показывает на то, как обращаться к ресурсу, чаще всего это сетевой протокол (http, 
ftp, ldap)
●   Иерархическая часть (hier-part) - данные, необходимые для идентификации ресурса (например, адрес 
сайта)
●   Запрос (query) - необязательные дополнительные данные ресурса (например, поисковой запрос) 
●   Фрагмент (fragment) – необязательный компонент для идентификации вторичного ресурса ресурса 
(например, место на странице) 
Общий синтаксис URI выглядит так:
URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
Теперь, когда мы знаем, что такое URI, URL тоже должен быть достаточно понятным. Всегда помните - URI 
может содержать URL, но URL указывает только адрес ресурса.URL содержит следующую информацию:
●   Протокол, который используется для доступа к ресурсу – http, https, ftp
●   Расположение сервера с использованием IP-адреса или имени домена - например, wiki.merionet.ru - 
это имя домена. https://192.168.1.17 - здесь ресурс расположен по указанному IP-адресу
●   Номер порта на сервере. Например, http://localhost: 8080, где 8080 - это порт.
●   Точное местоположение в структуре каталогов сервера. Например - https://wiki.merionet.ru/ip- 
telephoniya/ - это точное местоположение, если пользователь хочет перейти в раздел про телефонию 
на сайте.
●   Необязательный идентификатор фрагмента. Например, 
https://www.google.com/search?ei=qw3eqwe12e1w&q=URL, где q = URL - это строка запроса, введенная 
пользователем.
Синтаксис:
[protocol]://www.[domain_name]:[port 80]/[path or exaction resource location]?[query]#[fragment]

Идемпотентные HTTP методы
Метод считается «идемпотентным», если эффект на сервер от одного запроса такой же как от нескольких идентичных запросов такого типа. Из методов запроса, определенных в этой спецификации, PUT, DELETE и безопасные методы (не изменяют состояние сервера) запросов являются идемпотентными.

Другими словами если многократное повторение одних и тех же запросов возвращает одинаковые результаты, то метод считается идемпотентным.

Из спецификации HTTP:
Метода	Безопасный	Идемпотентный	Ссылка
CONNECT	нет	нет	Section 4.3.6
DELETE	нет	да	Section 4.3.5
GET	да	да	Section 4.3.1
HEAD	да	да	Section 4.3.2
OPTIONS	да	да	Section 4.3.7
POST	нет	нет	Section 4.3.3
PUT	нет	да	Section 4.3.4
TRACE	да	да

Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only). Несколько следующих методов HTTP безопасные: GET , HEAD или OPTIONS .
Авторизация и аутентификация
Аутентификация
Авторизация
Процедура проверки подлинности 
субъекта
Процедура присвоения и проверки прав на 
совершение определенных действий субъектом
Зависит от предоставляемой 
пользователем информации
Не зависит от действий клиента
Запускается один раз для текущей 
сессии
Происходит при попытке совершения любых действий 
пользователем
Как работает авторизация/аутентификация? Как сайт понимает, что ты залогинен?
Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его 
идентификатор, однозначно определяющий этого субъекта в информационной системе.
Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем 
сравнения введенного им пароля с паролем, сохраненным в базе данных.
Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных 
действий.

Определение IP-адреса
IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.

По сути, IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и являются важным компонентом работы интернета.
Что такое IP-адрес?
IP-адрес – это строка чисел, разделенных точками. IP-адреса представляют собой набор из четырех чисел, например, 192.158.1.38. Каждое число в этом наборе принадлежит интервалу от 0 до 255. Таким образом, полный диапазон IP-адресации – это адреса от 0.0.0.0 до 255.255.255.255.

IP-адреса не случайны. Они рассчитываются математически и распределяются Администрацией адресного пространства Интернета (Internet Assigned Numbers Authority, IANA), подразделением Корпорации по присвоению имен и номеров в Интернете (Internet Corporation for Assigned Names and Numbers, ICANN). ICANN – это некоммерческая организация, основанная в США в 1998 году с целью поддержки безопасности интернета и обеспечения его доступности для всех пользователей. Каждый раз, когда кто-либо регистрирует домен в интернете, он пользуется услугами регистратора доменных имен, который платит ICANN небольшой сбор за регистрацию домена.

Как работают IP-адреса
Понимание того, как работают IP-адреса, поможет разораться, почему определенное устройство не подключается так, как ожидалось, и устранить неполадки в работе сети.

Интернет-протокол работает так же, как и любой другой язык: передает информацию с использованием установленных правил. Устройства обнаруживают другие подключенные устройства и обмениваются с ними информацией, используя этот протокол. Проще говоря, все компьютеры, где бы они не находились, могут общаться друг с другом.

Использование IP-адресов обычно происходит незаметно. Процесс работает следующим образом:

Устройство подключается к интернету не напрямую: сначала оно подключается к сети, подключенной к интернету, а сеть, в свою очередь, предоставляет устройству доступ к интернету.
Если вы находитесь дома, скорее всего, этой сетью является сеть вашего интернет-провайдера. В офисе это будет сеть вашей компании.
IP-адрес назначается устройству вашим интернет-провайдером.
Ваша интернет-активность проходит через интернет-провайдера, а он перенаправляет вам ответы на запросы, используя ваш IP-адрес. Поскольку провайдер предоставляет доступ в Интернет, его роль заключается в назначении IP-адрес вашему устройству.
Однако ваш IP-адрес может измениться, например, при включение или выключение модема или маршрутизатора. Можно также связаться с интернет-провайдером, чтобы он изменил IP-адрес.
Если вы находитесь вне дома, например, путешествуете, и берете с собой устройство, домашний IP-адрес не закрепляется за устройством. Это связано с тем, что устройство будет использовать другую сеть (Wi-Fi в отеле, аэропорту, кафе) для доступа в интернет и другой временный IP-адрес, назначенный интернет-провайдером в отеле, аэропорту или кафе.
Как следует из этого процесса, существуют различные типы IP-адресов, которые будут описаны ниже.

Типы IP-адресов
Существуют разные категории IP-адресов, и в каждой категории имеются разные типы.

Клиентские IP-адреса
У каждого человека или компании с тарифным планом на получение интернет-услуг есть два типа IP-адресов: частный и общедоступный. Термины частный и общедоступный относятся к сетевому расположению: частный IP-адрес используется внутри сети, а общедоступный – за пределами сети.

Частные IP-адреса
Каждое устройство, которое подключается к вашей интернет-сети, имеет частный IP-адрес. Это могут быть компьютеры, смартфоны, планшеты, а также любые устройства с поддержкой Bluetooth, такие как динамики, принтеры, смарт-телевизоры. С развитием интернета вещей растет и количество частных IP-адресов в домашней сети. Маршрутизатору необходимо идентифицировать каждое из этих устройств, а многие устройства также должны идентифицировать друг друга. Поэтому маршрутизатор генерирует частные IP-адреса, которые являются уникальными идентификаторами каждого устройства и позволяют различать их в сети.

Общедоступные IP-адреса
Общедоступный IP-адрес – это основной адрес, связанный со всей сетью. Каждое подключенное устройство имеет собственный IP-адрес, но они также включены в состав основного IP-адреса сети. Как было описано выше, общедоступный IP-адрес предоставляется маршрутизатору интернет-провайдером. Обычно у интернет-провайдеров есть большой пул IP-адресов, которые они присваивают клиентам. Общедоступный IP-адрес – это адрес, который устройства за пределами интернет-сети будут использовать для распознавания этой сети.

Общедоступные IP-адреса
Общедоступные IP-адреса бывают двух видов: динамические и статические.

Динамические IP-адреса
Динамические IP-адреса меняются автоматически и регулярно. Интернет-провайдеры покупают большой пул IP-адресов и автоматически присваивают их своим клиентам. Периодически они меняют присвоенные IP-адреса и помещают старые IP-адреса обратно в пул для использования другими клиентами. Обоснованием этого подхода служит экономия средств провайдера. Автоматизация регулярного изменения IP-адресов позволяет им не выполнять никаких действий для восстановления IP-адреса клиента, например, если он переезжает. Также имеются преимущества с точки зрения безопасности, поскольку изменение IP-адреса затрудняет взлом сетевого интерфейса злоумышленниками.

Статические IP-адреса
В отличие от динамических IP-адресов, статические IP- адреса остаются неизменными. После того, как сеть назначает IP-адрес, он остается неизменным. Большинству частных лиц и организаций не нужны статические IP-адреса, но для организаций, планирующих размещать собственные серверы, наличие статического IP-адреса крайне важно. Это связано с тем, что статический IP-адрес гарантирует, что привязанные к нему веб-сайты и адреса электронной почты будут иметь постоянные IP-адреса. Это очень важно, если требуется, чтобы другие устройства могли находить их в интернете.

В результате возникла классификация по типам IP-адресов веб-сайтов.

Два типа IP-адресов веб-сайтов
Для владельцев веб-сайтов, использующих пакет веб-хостинга (что характерно для большинства веб-сайтов), а не собственный сервер, существует два типа IP-адресов веб-сайтов: общие и выделенные.

Общие IP-адреса
Веб-сайты, использующие общие хостинговые планы от провайдеров веб-хостинга, обычно являются одним из многих веб-сайтов, размещенных на одном сервере. Это, как правило, веб-сайты физических лиц или компаний малого и среднего бизнеса, с ограниченным объемом трафика, количеством страниц и т. д. Такие веб-сайты имеют общие IP-адреса.

Выделенные IP-адреса
В некоторых тарифных планах веб-хостинга есть возможность приобрести выделенный IP-адрес (или адреса). Это может упростить получение SSL-сертификата и позволяет использовать собственный FTP-сервер (сервер протокола передачи файлов). Кроме того, это упрощает организацию общего доступа и передачу файлов в рамках организации и позволяет использовать анонимный FTP-доступ. Выделенный IP-адрес также позволяет получить доступ к веб-сайту, используя только IP-адрес, а не доменное имя. Это полезно, если требуется создать и протестировать его перед регистрацией домена.

Как выполняется поиск IP-адресов
Самый простой способ выяснить общедоступный IP-адрес маршрутизатора – выполнить поиск в Google по словам «What is my IP address?» (Какой у меня IP-адрес?). Ответ отобразится в Google вверху страницы.

На других веб-сайтах будет отображаться та же информация: они видят общедоступный IP-адрес, потому что при посещении сайта маршрутизатор выполняет запрос и, следовательно, раскрывает информацию. Такие сайты, как WhatIsMyIP.com и IPLocation показывают название и город интернет-провайдера.

Как правило, этим способом можно узнать только приблизительное местоположение провайдера, а не фактическое местоположение устройства. При использовании этого способа необходимо также выйти из VPN. Чтобы узнать фактический адрес местоположения устройства по общедоступному IP-адресу, обычно требуется предоставить интернет-провайдеру ордер на обыск.

Выяснение частного IP-адреса зависит от платформы:

Windows:

Используйте командную строку.
В строке поиска Windows укажите cmd (без кавычек).
В появившемся окне введите ipconfig (без кавычек), чтобы отобразилась информация об IP-адресе.
Mac:

Перейдите в Системные настройки.
Выберите сеть, и отобразится требуемая информация.
iPhone:
Перейдите в настройки.
Выберите Wi-Fi и щелкните значок «i» в кружочке рядом с названием используемой сети. IP-адрес отобразится на закладке DHCP.
Чтобы проверить IP-адреса других устройств в сети, перейдите к маршрутизатору. Способ доступа к маршрутизатору зависит от его бренда и используемого программного обеспечения. Как правило, для доступа необходимо иметь возможность ввести IP-адрес шлюза маршрутизатора в веб-браузере, находясь в той же сети. Оттуда нужно перейти к пункту «Подключенные устройства», где отобразится список всех устройств, подключенных к сети в настоящее время или подключавшихся недавно, включая их IP-адреса.

Что такое октаты в DNS

